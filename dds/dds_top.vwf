/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	PRINT_OPTIONS = "Print_options_version 6\
range_start 0ps\
range_end 1.0us\
width 1\
names_percentage 25\
comments 1\
grid_lines 1\
time_bars 1\
name_every_page 0\
expand_groups 0\
print_all 1\
print_row_height 100";
	DATA_OFFSET = 0.0;
	DATA_DURATION = 64000.0;
	SIMULATION_TIME = 64000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 1000.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("ddsout")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ddsout[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ddsout";
}

SIGNAL("ddsout[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ddsout";
}

SIGNAL("ddsout[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ddsout";
}

SIGNAL("ddsout[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ddsout";
}

SIGNAL("ddsout[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ddsout";
}

SIGNAL("ddsout[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ddsout";
}

SIGNAL("ddsout[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ddsout";
}

SIGNAL("ddsout[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "ddsout";
}

SIGNAL("fclk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("fwords")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 20;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("fwords[19]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[18]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[17]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[16]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[15]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[14]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[13]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[12]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("fwords[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "fwords";
}

SIGNAL("pwords")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 10;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("pwords[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "pwords";
}

SIGNAL("pwords[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "pwords";
}

SIGNAL("pwords[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "pwords";
}

SIGNAL("pwords[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "pwords";
}

SIGNAL("pwords[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "pwords";
}

SIGNAL("pwords[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "pwords";
}

SIGNAL("pwords[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "pwords";
}

SIGNAL("pwords[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "pwords";
}

SIGNAL("pwords[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "pwords";
}

SIGNAL("pwords[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "pwords";
}

TRANSITION_LIST("ddsout[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5175.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 10160.0;
			LEVEL 0 FOR 10320.0;
		}
		LEVEL 1 FOR 10160.0;
		LEVEL 0 FOR 7705.0;
	}
}

TRANSITION_LIST("ddsout[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2595.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2580.0;
			LEVEL 0 FOR 2560.0;
			LEVEL 1 FOR 5040.0;
			LEVEL 0 FOR 2560.0;
			LEVEL 1 FOR 2580.0;
			LEVEL 0 FOR 5160.0;
		}
		LEVEL 1 FOR 2580.0;
		LEVEL 0 FOR 2560.0;
		LEVEL 1 FOR 5040.0;
		LEVEL 0 FOR 2560.0;
		LEVEL 1 FOR 2580.0;
		LEVEL 0 FOR 5125.0;
	}
}

TRANSITION_LIST("ddsout[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1315.0;
		LEVEL 1 FOR 1280.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1300.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1280.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 2480.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1280.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1300.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1280.0;
		LEVEL 0 FOR 2600.0;
		LEVEL 1 FOR 1280.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1300.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1280.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 2480.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1280.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1300.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1280.0;
		LEVEL 0 FOR 2600.0;
		LEVEL 1 FOR 1280.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1300.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1280.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 2480.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1280.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1300.0;
		LEVEL 0 FOR 1280.0;
		LEVEL 1 FOR 1280.0;
		LEVEL 0 FOR 2600.0;
		LEVEL 1 FOR 1245.0;
	}
}

TRANSITION_LIST("ddsout[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 675.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 640.0;
			LEVEL 0 FOR 640.0;
		}
		LEVEL 1 FOR 660.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 640.0;
			LEVEL 1 FOR 640.0;
		}
		LEVEL 0 FOR 640.0;
		LEVEL 1 FOR 1200.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 640.0;
			LEVEL 1 FOR 640.0;
		}
		LEVEL 0 FOR 640.0;
		LEVEL 1 FOR 660.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 640.0;
			LEVEL 1 FOR 640.0;
		}
		LEVEL 0 FOR 1320.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 640.0;
			LEVEL 0 FOR 640.0;
		}
		LEVEL 1 FOR 660.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 640.0;
			LEVEL 1 FOR 640.0;
		}
		LEVEL 0 FOR 640.0;
		LEVEL 1 FOR 1200.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 640.0;
			LEVEL 1 FOR 640.0;
		}
		LEVEL 0 FOR 640.0;
		LEVEL 1 FOR 660.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 640.0;
			LEVEL 1 FOR 640.0;
		}
		LEVEL 0 FOR 1320.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 640.0;
			LEVEL 0 FOR 640.0;
		}
		LEVEL 1 FOR 660.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 640.0;
			LEVEL 1 FOR 640.0;
		}
		LEVEL 0 FOR 640.0;
		LEVEL 1 FOR 1200.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 640.0;
			LEVEL 1 FOR 640.0;
		}
		LEVEL 0 FOR 640.0;
		LEVEL 1 FOR 660.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 640.0;
			LEVEL 1 FOR 640.0;
		}
		LEVEL 0 FOR 1320.0;
		LEVEL 1 FOR 640.0;
		LEVEL 0 FOR 640.0;
		LEVEL 1 FOR 605.0;
	}
}

TRANSITION_LIST("ddsout[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 355.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 320.0;
			LEVEL 0 FOR 320.0;
		}
		LEVEL 1 FOR 340.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 320.0;
			LEVEL 1 FOR 320.0;
		}
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 560.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 320.0;
			LEVEL 1 FOR 320.0;
		}
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 340.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 320.0;
			LEVEL 1 FOR 320.0;
		}
		LEVEL 0 FOR 680.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 320.0;
			LEVEL 0 FOR 320.0;
		}
		LEVEL 1 FOR 340.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 320.0;
			LEVEL 1 FOR 320.0;
		}
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 560.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 320.0;
			LEVEL 1 FOR 320.0;
		}
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 340.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 320.0;
			LEVEL 1 FOR 320.0;
		}
		LEVEL 0 FOR 680.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 320.0;
			LEVEL 0 FOR 320.0;
		}
		LEVEL 1 FOR 340.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 320.0;
			LEVEL 1 FOR 320.0;
		}
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 560.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 320.0;
			LEVEL 1 FOR 320.0;
		}
		LEVEL 0 FOR 320.0;
		LEVEL 1 FOR 340.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 320.0;
			LEVEL 1 FOR 320.0;
		}
		LEVEL 0 FOR 680.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 320.0;
			LEVEL 0 FOR 320.0;
		}
		LEVEL 1 FOR 285.0;
	}
}

TRANSITION_LIST("ddsout[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 195.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 1 FOR 160.0;
			LEVEL 0 FOR 160.0;
		}
		LEVEL 1 FOR 180.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 160.0;
		}
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 240.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 160.0;
		}
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 180.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 160.0;
		}
		LEVEL 0 FOR 360.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 1 FOR 160.0;
			LEVEL 0 FOR 160.0;
		}
		LEVEL 1 FOR 180.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 160.0;
		}
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 240.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 160.0;
		}
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 180.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 160.0;
		}
		LEVEL 0 FOR 360.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 1 FOR 160.0;
			LEVEL 0 FOR 160.0;
		}
		LEVEL 1 FOR 180.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 160.0;
		}
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 240.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 160.0;
		}
		LEVEL 0 FOR 160.0;
		LEVEL 1 FOR 180.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 0 FOR 160.0;
			LEVEL 1 FOR 160.0;
		}
		LEVEL 0 FOR 360.0;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 160.0;
			LEVEL 0 FOR 160.0;
		}
		LEVEL 1 FOR 125.0;
	}
}

TRANSITION_LIST("ddsout[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 115.0;
		NODE
		{
			REPEAT = 2;
			NODE
			{
				REPEAT = 31;
				LEVEL 1 FOR 80.0;
				LEVEL 0 FOR 80.0;
			}
			LEVEL 1 FOR 100.0;
			NODE
			{
				REPEAT = 63;
				LEVEL 0 FOR 80.0;
				LEVEL 1 FOR 80.0;
			}
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 100.0;
			NODE
			{
				REPEAT = 31;
				LEVEL 0 FOR 80.0;
				LEVEL 1 FOR 80.0;
			}
			LEVEL 0 FOR 200.0;
		}
		NODE
		{
			REPEAT = 31;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 100.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 80.0;
		LEVEL 1 FOR 100.0;
		NODE
		{
			REPEAT = 31;
			LEVEL 0 FOR 80.0;
			LEVEL 1 FOR 80.0;
		}
		LEVEL 0 FOR 200.0;
		NODE
		{
			REPEAT = 15;
			LEVEL 1 FOR 80.0;
			LEVEL 0 FOR 80.0;
		}
		LEVEL 1 FOR 45.0;
	}
}

TRANSITION_LIST("ddsout[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 75.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 120.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 120.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 40.0;
		LEVEL 1 FOR 20.0;
		LEVEL 0 FOR 20.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 60.0;
		NODE
		{
			REPEAT = 63;
			LEVEL 0 FOR 40.0;
			LEVEL 1 FOR 40.0;
		}
		LEVEL 0 FOR 120.0;
		NODE
		{
			REPEAT = 31;
			LEVEL 1 FOR 40.0;
			LEVEL 0 FOR 40.0;
		}
		LEVEL 1 FOR 5.0;
	}
}

TRANSITION_LIST("fclk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 6400;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 5.0;
		}
	}
}

TRANSITION_LIST("fwords[19]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[18]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[17]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[16]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[15]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[14]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[13]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[12]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[11]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("fwords[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("pwords[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("pwords[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("pwords[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("pwords[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("pwords[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("pwords[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("pwords[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("pwords[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

TRANSITION_LIST("pwords[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 64000.0;
		}
	}
}

TRANSITION_LIST("pwords[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 64000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "ddsout";
	EXPAND_STATUS = EXPANDED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4, 5, 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "ddsout[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ddsout[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ddsout[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ddsout[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ddsout[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ddsout[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ddsout[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ddsout[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "fclk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "fwords";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
	CHILDREN = 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[19]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[18]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[17]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[16]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[15]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[14]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[13]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[12]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 29;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "fwords[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "pwords";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 31;
	TREE_LEVEL = 0;
	CHILDREN = 32, 33, 34, 35, 36, 37, 38, 39, 40, 41;
}

DISPLAY_LINE
{
	CHANNEL = "pwords[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 32;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "pwords[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "pwords[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "pwords[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "pwords[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 36;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "pwords[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 37;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "pwords[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 38;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "pwords[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 39;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "pwords[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 40;
	TREE_LEVEL = 1;
	PARENT = 31;
}

DISPLAY_LINE
{
	CHANNEL = "pwords[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 41;
	TREE_LEVEL = 1;
	PARENT = 31;
}

TIME_BAR
{
	TIME = 20486925;
	MASTER = TRUE;
}
;
